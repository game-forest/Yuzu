//------------------------------------------------------------------------------
// <auto-generated>
// Yuzu generated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

using Yuzu.Binary;

namespace YuzuGenBin
{
	public class BinaryDeserializerGen: BinaryDeserializerGenBase
	{
		private static void Read_YuzuTestᱹSample1(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.Sample1)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.X = d.Reader.ReadInt32();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (2 == fd.OurIndex) {
				result.Y = d.Reader.ReadString();
				if (result.Y == "" && d.Reader.ReadBoolean()) result.Y = null;
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSample1(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.Sample1();
			Read_YuzuTestᱹSample1(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSample2(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.Sample2)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.X = d.Reader.ReadInt32();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (2 == fd.OurIndex) {
				result.Y = d.Reader.ReadString();
				if (result.Y == "" && d.Reader.ReadBoolean()) result.Y = null;
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSample2(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.Sample2();
			Read_YuzuTestᱹSample2(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSample3(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.Sample3)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.S1 = (global::YuzuTest.Sample1)BinaryDeserializer.ReadObject<global::YuzuTest.Sample1>(dg);
			fd = def.Fields[d.Reader.ReadInt16()];
			if (2 == fd.OurIndex) {
				result.F = d.Reader.ReadInt32();
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (3 == fd.OurIndex) {
				result.S2 = (global::YuzuTest.Sample2)BinaryDeserializer.ReadObject<global::YuzuTest.Sample2>(dg);
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSample3(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.Sample3();
			Read_YuzuTestᱹSample3(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleEnumMemberTyped(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleEnumMemberTyped)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 == fd.OurIndex) {
				result.Eb = (global::YuzuTest.SampleEnumByte)d.Reader.ReadByte();
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (2 == fd.OurIndex) {
				result.El = (global::YuzuTest.SampleEnumLong)d.Reader.ReadInt64();
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleEnumMemberTyped(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleEnumMemberTyped();
			Read_YuzuTestᱹSampleEnumMemberTyped(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSample4(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.Sample4)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 == fd.OurIndex) {
				result.E = (global::YuzuTest.SampleEnum)d.Reader.ReadInt32();
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSample4(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.Sample4();
			Read_YuzuTestᱹSample4(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleDecimal(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleDecimal)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.N = d.Reader.ReadDecimal();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleDecimal(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleDecimal();
			Read_YuzuTestᱹSampleDecimal(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleNullable(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleNullable)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.N = d.Reader.ReadBoolean() ? (int?)null : d.Reader.ReadInt32();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleNullable(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleNullable();
			Read_YuzuTestᱹSampleNullable(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleObj(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleObj)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.F = BinaryDeserializer.ReadAny(dg);
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleObj(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleObj();
			Read_YuzuTestᱹSampleObj(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleDict(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleDict)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.Value = d.Reader.ReadInt32();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (2 == fd.OurIndex) {
				result.Children = (global::System.Collections.Generic.Dictionary<string, global::YuzuTest.SampleDict>)null;
				var tmp1 = d.Reader.ReadInt32();
				if (tmp1 >= 0) {
					result.Children = new global::System.Collections.Generic.Dictionary<string, global::YuzuTest.SampleDict>();
					while (--tmp1 >= 0) {
						var tmp2 = d.Reader.ReadString();
						if (tmp2 == "" && d.Reader.ReadBoolean()) tmp2 = null;
						var tmp3 = (global::YuzuTest.SampleDict)BinaryDeserializer.ReadObject<global::YuzuTest.SampleDict>(dg);
						result.Children.Add(tmp2, tmp3);
					}
				}
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleDict(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleDict();
			Read_YuzuTestᱹSampleDict(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleSortedDict(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleSortedDict)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 == fd.OurIndex) {
				result.d = (global::System.Collections.Generic.SortedDictionary<string, int>)null;
				var tmp1 = d.Reader.ReadInt32();
				if (tmp1 >= 0) {
					result.d = new global::System.Collections.Generic.SortedDictionary<string, int>();
					while (--tmp1 >= 0) {
						var tmp2 = d.Reader.ReadString();
						if (tmp2 == "" && d.Reader.ReadBoolean()) tmp2 = null;
						var tmp3 = d.Reader.ReadInt32();
						result.d.Add(tmp2, tmp3);
					}
				}
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleSortedDict(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleSortedDict();
			Read_YuzuTestᱹSampleSortedDict(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleDictKeys(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleDictKeys)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.E = (global::System.Collections.Generic.Dictionary<global::YuzuTest.SampleEnum, int>)null;
			var tmp1 = d.Reader.ReadInt32();
			if (tmp1 >= 0) {
				result.E = new global::System.Collections.Generic.Dictionary<global::YuzuTest.SampleEnum, int>();
				while (--tmp1 >= 0) {
					var tmp2 = (global::YuzuTest.SampleEnum)d.Reader.ReadInt32();
					var tmp3 = d.Reader.ReadInt32();
					result.E.Add(tmp2, tmp3);
				}
			}
			fd = def.Fields[d.Reader.ReadInt16()];
			if (2 != fd.OurIndex) throw dg.Error("2!=" + fd.OurIndex);
			result.I = (global::System.Collections.Generic.Dictionary<int, int>)null;
			var tmp4 = d.Reader.ReadInt32();
			if (tmp4 >= 0) {
				result.I = new global::System.Collections.Generic.Dictionary<int, int>();
				while (--tmp4 >= 0) {
					var tmp5 = d.Reader.ReadInt32();
					var tmp6 = d.Reader.ReadInt32();
					result.I.Add(tmp5, tmp6);
				}
			}
			fd = def.Fields[d.Reader.ReadInt16()];
			if (3 != fd.OurIndex) throw dg.Error("3!=" + fd.OurIndex);
			result.K = (global::System.Collections.Generic.Dictionary<global::YuzuTest.SampleKey, int>)null;
			var tmp7 = d.Reader.ReadInt32();
			if (tmp7 >= 0) {
				result.K = new global::System.Collections.Generic.Dictionary<global::YuzuTest.SampleKey, int>();
				while (--tmp7 >= 0) {
					var tmp8 = (global::YuzuTest.SampleKey)BinaryDeserializer.ReadObject<global::YuzuTest.SampleKey>(dg);
					var tmp9 = d.Reader.ReadInt32();
					result.K.Add(tmp8, tmp9);
				}
			}
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleDictKeys(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleDictKeys();
			Read_YuzuTestᱹSampleDictKeys(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleMemberI(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleMemberI)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 == fd.OurIndex) {
				result.X = d.Reader.ReadInt32();
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleMemberI(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleMemberI();
			Read_YuzuTestᱹSampleMemberI(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleArray(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleArray)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.A = (string[])null;
			var tmp1 = d.Reader.ReadInt32();
			if (tmp1 >= 0) {
				var tmp2 = new string[tmp1];
				for(tmp1 = 0; tmp1 < tmp2.Length; ++tmp1) {
					tmp2[tmp1] = d.Reader.ReadString();
					if (tmp2[tmp1] == "" && d.Reader.ReadBoolean()) tmp2[tmp1] = null;
				}
				result.A = tmp2;
			}
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleArray(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleArray();
			Read_YuzuTestᱹSampleArray(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleArrayOfArray(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleArrayOfArray)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.A = (int[][])null;
			var tmp1 = d.Reader.ReadInt32();
			if (tmp1 >= 0) {
				var tmp2 = new int[tmp1][];
				for(tmp1 = 0; tmp1 < tmp2.Length; ++tmp1) {
					tmp2[tmp1] = (int[])null;
					var tmp3 = d.Reader.ReadInt32();
					if (tmp3 >= 0) {
						var tmp4 = new int[tmp3];
						for(tmp3 = 0; tmp3 < tmp4.Length; ++tmp3) {
							tmp4[tmp3] = d.Reader.ReadInt32();
						}
						tmp2[tmp1] = tmp4;
					}
				}
				result.A = tmp2;
			}
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleArrayOfArray(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleArrayOfArray();
			Read_YuzuTestᱹSampleArrayOfArray(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleArrayNDim(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleArrayNDim)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.A = (int[,])BinaryDeserializer.ReadArrayNDim(dg, typeof(int), 2);
			fd = def.Fields[d.Reader.ReadInt16()];
			if (2 != fd.OurIndex) throw dg.Error("2!=" + fd.OurIndex);
			result.B = (string[,,])BinaryDeserializer.ReadArrayNDim(dg, typeof(string), 3);
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleArrayNDim(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleArrayNDim();
			Read_YuzuTestᱹSampleArrayNDim(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleBase(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleBase)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.FBase = d.Reader.ReadInt32();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleBase(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleBase();
			Read_YuzuTestᱹSampleBase(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleDerivedA(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleDerivedA)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.FBase = d.Reader.ReadInt32();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (2 != fd.OurIndex) throw dg.Error("2!=" + fd.OurIndex);
			result.FA = d.Reader.ReadInt32();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleDerivedA(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleDerivedA();
			Read_YuzuTestᱹSampleDerivedA(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleDerivedB(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleDerivedB)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.FBase = d.Reader.ReadInt32();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (2 != fd.OurIndex) throw dg.Error("2!=" + fd.OurIndex);
			result.FB = d.Reader.ReadInt32();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleDerivedB(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleDerivedB();
			Read_YuzuTestᱹSampleDerivedB(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleMatrix(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleMatrix)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.M = (global::System.Collections.Generic.List<global::System.Collections.Generic.List<int>>)null;
			var tmp1 = d.Reader.ReadInt32();
			if (tmp1 >= 0) {
				result.M = new global::System.Collections.Generic.List<global::System.Collections.Generic.List<int>>();
				while (--tmp1 >= 0) {
					var tmp2 = (global::System.Collections.Generic.List<int>)null;
					var tmp3 = d.Reader.ReadInt32();
					if (tmp3 >= 0) {
						tmp2 = new global::System.Collections.Generic.List<int>();
						while (--tmp3 >= 0) {
							var tmp4 = d.Reader.ReadInt32();
							tmp2.Add(tmp4);
						}
					}
					result.M.Add(tmp2);
				}
			}
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleMatrix(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleMatrix();
			Read_YuzuTestᱹSampleMatrix(d, def, result);
			return result;
		}

		private static object Make_YuzuTestᱹSamplePoint(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SamplePoint();
			result.X = d.Reader.ReadInt32();
			result.Y = d.Reader.ReadInt32();
			return result;
		}

		private static void Read_YuzuTestᱹSampleRect(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleRect)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			BinaryDeserializer.EnsureClassDef(dg, typeof(global::YuzuTest.SamplePoint));
			result.A.X = d.Reader.ReadInt32();
			result.A.Y = d.Reader.ReadInt32();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (2 != fd.OurIndex) throw dg.Error("2!=" + fd.OurIndex);
			BinaryDeserializer.EnsureClassDef(dg, typeof(global::YuzuTest.SamplePoint));
			result.B.X = d.Reader.ReadInt32();
			result.B.Y = d.Reader.ReadInt32();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleRect(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleRect();
			Read_YuzuTestᱹSampleRect(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleGuid(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleGuid)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.G = new Guid(d.Reader.ReadBytes(16));
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleGuid(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleGuid();
			Read_YuzuTestᱹSampleGuid(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleDefault(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleDefault)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 == fd.OurIndex) {
				result.A = d.Reader.ReadInt32();
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (2 == fd.OurIndex) {
				result.B = d.Reader.ReadString();
				if (result.B == "" && d.Reader.ReadBoolean()) result.B = null;
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (3 == fd.OurIndex) {
				BinaryDeserializer.EnsureClassDef(dg, typeof(global::YuzuTest.SamplePoint));
				result.P.X = d.Reader.ReadInt32();
				result.P.Y = d.Reader.ReadInt32();
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleDefault(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleDefault();
			Read_YuzuTestᱹSampleDefault(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹColor(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.Color)obj;
			result.B = d.Reader.ReadByte();
			result.G = d.Reader.ReadByte();
			result.R = d.Reader.ReadByte();
		}

		private static object Make_YuzuTestᱹColor(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.Color();
			Read_YuzuTestᱹColor(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleClassList(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleClassList)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.E = (global::System.Collections.Generic.List<global::YuzuTest.SampleBase>)null;
			var tmp1 = d.Reader.ReadInt32();
			if (tmp1 >= 0) {
				result.E = new global::System.Collections.Generic.List<global::YuzuTest.SampleBase>();
				while (--tmp1 >= 0) {
					var tmp2 = (global::YuzuTest.SampleBase)BinaryDeserializer.ReadObject<global::YuzuTest.SampleBase>(dg);
					result.E.Add(tmp2);
				}
			}
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleClassList(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleClassList();
			Read_YuzuTestᱹSampleClassList(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleSmallTypes(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleSmallTypes)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.B = d.Reader.ReadByte();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (2 != fd.OurIndex) throw dg.Error("2!=" + fd.OurIndex);
			result.Ch = d.Reader.ReadChar();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (3 != fd.OurIndex) throw dg.Error("3!=" + fd.OurIndex);
			result.Sb = d.Reader.ReadSByte();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (4 != fd.OurIndex) throw dg.Error("4!=" + fd.OurIndex);
			result.Sh = d.Reader.ReadInt16();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (5 != fd.OurIndex) throw dg.Error("5!=" + fd.OurIndex);
			result.USh = d.Reader.ReadUInt16();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleSmallTypes(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleSmallTypes();
			Read_YuzuTestᱹSampleSmallTypes(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleWithNullFieldCompact(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleWithNullFieldCompact)obj;
			var dg = (BinaryDeserializerGen)d;
			result.N = (global::YuzuTest.Sample1)BinaryDeserializer.ReadObject<global::YuzuTest.Sample1>(dg);
		}

		private static object Make_YuzuTestᱹSampleWithNullFieldCompact(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleWithNullFieldCompact();
			Read_YuzuTestᱹSampleWithNullFieldCompact(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleNestedᱹNestedClass(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleNested.NestedClass)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 == fd.OurIndex) {
				result.Z = d.Reader.ReadInt32();
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleNestedᱹNestedClass(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleNested.NestedClass();
			Read_YuzuTestᱹSampleNestedᱹNestedClass(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleNested(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleNested)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.C = (global::YuzuTest.SampleNested.NestedClass)BinaryDeserializer.ReadObject<global::YuzuTest.SampleNested.NestedClass>(dg);
			fd = def.Fields[d.Reader.ReadInt16()];
			if (2 != fd.OurIndex) throw dg.Error("2!=" + fd.OurIndex);
			result.E = (global::YuzuTest.SampleNested.NestedEnum)d.Reader.ReadInt32();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (3 == fd.OurIndex) {
				result.Z = (global::YuzuTest.SampleNested.NestedEnum[])null;
				var tmp1 = d.Reader.ReadInt32();
				if (tmp1 >= 0) {
					var tmp2 = new global::YuzuTest.SampleNested.NestedEnum[tmp1];
					for(tmp1 = 0; tmp1 < tmp2.Length; ++tmp1) {
						tmp2[tmp1] = (global::YuzuTest.SampleNested.NestedEnum)d.Reader.ReadInt32();
					}
					result.Z = tmp2;
				}
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleNested(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleNested();
			Read_YuzuTestᱹSampleNested(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSamplePerson(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SamplePerson)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.Name = d.Reader.ReadString();
			if (result.Name == "" && d.Reader.ReadBoolean()) result.Name = null;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (2 != fd.OurIndex) throw dg.Error("2!=" + fd.OurIndex);
			result.Birth = DateTime.FromBinary(d.Reader.ReadInt64());
			fd = def.Fields[d.Reader.ReadInt16()];
			if (3 != fd.OurIndex) throw dg.Error("3!=" + fd.OurIndex);
			result.Children = (global::System.Collections.Generic.List<global::YuzuTest.SamplePerson>)null;
			var tmp1 = d.Reader.ReadInt32();
			if (tmp1 >= 0) {
				result.Children = new global::System.Collections.Generic.List<global::YuzuTest.SamplePerson>();
				while (--tmp1 >= 0) {
					var tmp2 = (global::YuzuTest.SamplePerson)BinaryDeserializer.ReadObject<global::YuzuTest.SamplePerson>(dg);
					result.Children.Add(tmp2);
				}
			}
			fd = def.Fields[d.Reader.ReadInt16()];
			if (4 != fd.OurIndex) throw dg.Error("4!=" + fd.OurIndex);
			result.EyeColor = (global::YuzuTest.Color)BinaryDeserializer.ReadObject<global::YuzuTest.Color>(dg);
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSamplePerson(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SamplePerson();
			Read_YuzuTestᱹSamplePerson(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleInterfaceField(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleInterfaceField)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.I = (global::YuzuTest.ISample)BinaryDeserializer.ReadObject<global::YuzuTest.ISample>(dg);
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleInterfaceField(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleInterfaceField();
			Read_YuzuTestᱹSampleInterfaceField(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleInterfacedGenericʳstringʴ(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleInterfacedGeneric<string>)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.G = d.Reader.ReadString();
			if (result.G == "" && d.Reader.ReadBoolean()) result.G = null;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (2 != fd.OurIndex) throw dg.Error("2!=" + fd.OurIndex);
			result.X = d.Reader.ReadInt32();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleInterfacedGenericʳstringʴ(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleInterfacedGeneric<string>();
			Read_YuzuTestᱹSampleInterfacedGenericʳstringʴ(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleConcrete(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleConcrete)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.XX = d.Reader.ReadInt32();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleConcrete(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleConcrete();
			Read_YuzuTestᱹSampleConcrete(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleWithCollection(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleWithCollection)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.A = (global::YuzuTest.SampleCollection<global::YuzuTest.ISample>)null;
			var tmp1 = d.Reader.ReadInt32();
			if (tmp1 >= 0) {
				result.A = new global::YuzuTest.SampleCollection<global::YuzuTest.ISample>();
				while (--tmp1 >= 0) {
					var tmp2 = (global::YuzuTest.ISample)BinaryDeserializer.ReadObject<global::YuzuTest.ISample>(dg);
					result.A.Add(tmp2);
				}
			}
			fd = def.Fields[d.Reader.ReadInt16()];
			if (2 == fd.OurIndex) {
				result.B = (global::YuzuTest.SampleCollection<int>)null;
				var tmp3 = d.Reader.ReadInt32();
				if (tmp3 >= 0) {
					result.B = new global::YuzuTest.SampleCollection<int>();
					while (--tmp3 >= 0) {
						var tmp4 = d.Reader.ReadInt32();
						result.B.Add(tmp4);
					}
				}
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (3 == fd.OurIndex) {
				result.C = (global::YuzuTest.SampleCollection<global::YuzuTest.SamplePoint>)null;
				var tmp5 = d.Reader.ReadInt32();
				if (tmp5 >= 0) {
					result.C = new global::YuzuTest.SampleCollection<global::YuzuTest.SamplePoint>();
					while (--tmp5 >= 0) {
						var tmp6 = new global::YuzuTest.SamplePoint();
						BinaryDeserializer.EnsureClassDef(dg, typeof(global::YuzuTest.SamplePoint));
						tmp6.X = d.Reader.ReadInt32();
						tmp6.Y = d.Reader.ReadInt32();
						result.C.Add(tmp6);
					}
				}
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleWithCollection(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleWithCollection();
			Read_YuzuTestᱹSampleWithCollection(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleAfter2(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleAfter2)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.X = d.Reader.ReadString();
			if (result.X == "" && d.Reader.ReadBoolean()) result.X = null;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
			result.After2();
			result.After3();
			result.After();
		}

		private static object Make_YuzuTestᱹSampleAfter2(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleAfter2();
			Read_YuzuTestᱹSampleAfter2(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleAfterSerialization(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleAfterSerialization)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.X = d.Reader.ReadString();
			if (result.X == "" && d.Reader.ReadBoolean()) result.X = null;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleAfterSerialization(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleAfterSerialization();
			Read_YuzuTestᱹSampleAfterSerialization(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleBeforeDeserialization(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleBeforeDeserialization)obj;
			result.Before();
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.X = d.Reader.ReadString();
			if (result.X == "" && d.Reader.ReadBoolean()) result.X = null;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleBeforeDeserialization(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleBeforeDeserialization();
			Read_YuzuTestᱹSampleBeforeDeserialization(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleMerge(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleMerge)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			var tmp1 = d.Reader.ReadInt32();
			if (tmp1 >= 0) {
				while (--tmp1 >= 0) {
					var tmp2 = d.Reader.ReadInt32();
					var tmp3 = d.Reader.ReadInt32();
					result.DI.Add(tmp2, tmp3);
				}
			}
			fd = def.Fields[d.Reader.ReadInt16()];
			if (2 != fd.OurIndex) throw dg.Error("2!=" + fd.OurIndex);
			var tmp4 = d.Reader.ReadInt32();
			if (tmp4 >= 0) {
				while (--tmp4 >= 0) {
					var tmp5 = d.Reader.ReadInt32();
					result.LI.Add(tmp5);
				}
			}
			fd = def.Fields[d.Reader.ReadInt16()];
			if (3 == fd.OurIndex) {
				BinaryDeserializer.ReadIntoObject<global::YuzuTest.Sample1>(dg, result.M);
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleMerge(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleMerge();
			Read_YuzuTestᱹSampleMerge(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleAssemblyDerivedR(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleAssemblyDerivedR)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 == fd.OurIndex) {
				result.P = d.Reader.ReadInt16();
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (2 == fd.OurIndex) {
				result.R = d.Reader.ReadString();
				if (result.R == "" && d.Reader.ReadBoolean()) result.R = null;
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleAssemblyDerivedR(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleAssemblyDerivedR();
			Read_YuzuTestᱹSampleAssemblyDerivedR(d, def, result);
			return result;
		}

		private static object Make_YuzuTestᱹSampleAoSᱹColor(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleAoS.Color();
			result.B = d.Reader.ReadByte();
			result.G = d.Reader.ReadByte();
			result.R = d.Reader.ReadByte();
			return result;
		}

		private static object Make_YuzuTestᱹSampleAoSᱹVertex(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleAoS.Vertex();
			result.X = d.Reader.ReadSingle();
			result.Y = d.Reader.ReadSingle();
			result.Z = d.Reader.ReadSingle();
			return result;
		}

		private static void Read_YuzuTestᱹSampleAoSᱹS(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleAoS.S)obj;
			var dg = (BinaryDeserializerGen)d;
			BinaryDeserializer.EnsureClassDef(dg, typeof(global::YuzuTest.SampleAoS.Color));
			result.C.B = d.Reader.ReadByte();
			result.C.G = d.Reader.ReadByte();
			result.C.R = d.Reader.ReadByte();
			BinaryDeserializer.EnsureClassDef(dg, typeof(global::YuzuTest.SampleAoS.Vertex));
			result.V.X = d.Reader.ReadSingle();
			result.V.Y = d.Reader.ReadSingle();
			result.V.Z = d.Reader.ReadSingle();
		}

		private static object Make_YuzuTestᱹSampleAoSᱹS(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleAoS.S();
			Read_YuzuTestᱹSampleAoSᱹS(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleAoS(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleAoS)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.A = (global::System.Collections.Generic.List<global::YuzuTest.SampleAoS.S>)null;
			var tmp1 = d.Reader.ReadInt32();
			if (tmp1 >= 0) {
				result.A = new global::System.Collections.Generic.List<global::YuzuTest.SampleAoS.S>();
				while (--tmp1 >= 0) {
					var tmp2 = (global::YuzuTest.SampleAoS.S)BinaryDeserializer.ReadObject<global::YuzuTest.SampleAoS.S>(dg);
					result.A.Add(tmp2);
				}
			}
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleAoS(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleAoS();
			Read_YuzuTestᱹSampleAoS(d, def, result);
			return result;
		}

		private static object Make_YuzuTestᱹSampleStructWithProps(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleStructWithProps();
			var dg = (BinaryDeserializerGen)d;
			result.A = d.Reader.ReadInt32();
			BinaryDeserializer.EnsureClassDef(dg, typeof(global::YuzuTest.SamplePoint));
			var tmp1 = new global::YuzuTest.SamplePoint();
			tmp1.X = d.Reader.ReadInt32();
			tmp1.Y = d.Reader.ReadInt32();
			result.P = tmp1;
			return result;
		}

		private static void Read_YuzuTestᱹSampleAliasMany(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleAliasMany)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.X = d.Reader.ReadInt32();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleAliasMany(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleAliasMany();
			Read_YuzuTestᱹSampleAliasMany(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSamplePrivateConstructor(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SamplePrivateConstructor)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.X = d.Reader.ReadInt32();
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSamplePrivateConstructor(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = global::YuzuTest.SamplePrivateConstructor.Make();
			Read_YuzuTestᱹSamplePrivateConstructor(d, def, result);
			return result;
		}

		private static void Read_YuzuTestAssemblyᱹSampleAssemblyBase(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTestAssembly.SampleAssemblyBase)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 == fd.OurIndex) {
				result.P = d.Reader.ReadInt16();
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestAssemblyᱹSampleAssemblyBase(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTestAssembly.SampleAssemblyBase();
			Read_YuzuTestAssemblyᱹSampleAssemblyBase(d, def, result);
			return result;
		}

		private static void Read_YuzuTestAssemblyᱹSampleAssemblyDerivedQ(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTestAssembly.SampleAssemblyDerivedQ)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 == fd.OurIndex) {
				result.P = d.Reader.ReadInt16();
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (2 == fd.OurIndex) {
				result.Q = d.Reader.ReadInt16();
				fd = def.Fields[d.Reader.ReadInt16()];
			}
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestAssemblyᱹSampleAssemblyDerivedQ(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTestAssembly.SampleAssemblyDerivedQ();
			Read_YuzuTestAssemblyᱹSampleAssemblyDerivedQ(d, def, result);
			return result;
		}

		private static void Read_YuzuTest2ᱹSampleNamespace(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest2.SampleNamespace)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (1 != fd.OurIndex) throw dg.Error("1!=" + fd.OurIndex);
			result.B = (global::YuzuTest.SampleBase)BinaryDeserializer.ReadObject<global::YuzuTest.SampleBase>(dg);
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTest2ᱹSampleNamespace(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest2.SampleNamespace();
			Read_YuzuTest2ᱹSampleNamespace(d, def, result);
			return result;
		}

		private static void Read_YuzuTestᱹSampleExplicitCollectionʳintʴ(BinaryDeserializer d, ReaderClassDef def, object obj)
		{
			var result = (global::YuzuTest.SampleExplicitCollection<int>)obj;
			var dg = (BinaryDeserializerGen)d;
			ReaderClassDef.FieldDef fd;
			fd = def.Fields[d.Reader.ReadInt16()];
			if (fd.OurIndex != ReaderClassDef.EOF) throw dg.Error("Unfinished object");
		}

		private static object Make_YuzuTestᱹSampleExplicitCollectionʳintʴ(BinaryDeserializer d, ReaderClassDef def)
		{
			var result = new global::YuzuTest.SampleExplicitCollection<int>();
			Read_YuzuTestᱹSampleExplicitCollectionʳintʴ(d, def, result);
			return result;
		}

		static BinaryDeserializerGen()
		{
			readCache[typeof(global::YuzuTest.Sample1)] = Read_YuzuTestᱹSample1;
			readCache[typeof(global::YuzuTest.Sample2)] = Read_YuzuTestᱹSample2;
			readCache[typeof(global::YuzuTest.Sample3)] = Read_YuzuTestᱹSample3;
			readCache[typeof(global::YuzuTest.SampleEnumMemberTyped)] = Read_YuzuTestᱹSampleEnumMemberTyped;
			readCache[typeof(global::YuzuTest.Sample4)] = Read_YuzuTestᱹSample4;
			readCache[typeof(global::YuzuTest.SampleDecimal)] = Read_YuzuTestᱹSampleDecimal;
			readCache[typeof(global::YuzuTest.SampleNullable)] = Read_YuzuTestᱹSampleNullable;
			readCache[typeof(global::YuzuTest.SampleObj)] = Read_YuzuTestᱹSampleObj;
			readCache[typeof(global::YuzuTest.SampleDict)] = Read_YuzuTestᱹSampleDict;
			readCache[typeof(global::YuzuTest.SampleSortedDict)] = Read_YuzuTestᱹSampleSortedDict;
			readCache[typeof(global::YuzuTest.SampleDictKeys)] = Read_YuzuTestᱹSampleDictKeys;
			readCache[typeof(global::YuzuTest.SampleMemberI)] = Read_YuzuTestᱹSampleMemberI;
			readCache[typeof(global::YuzuTest.SampleArray)] = Read_YuzuTestᱹSampleArray;
			readCache[typeof(global::YuzuTest.SampleArrayOfArray)] = Read_YuzuTestᱹSampleArrayOfArray;
			readCache[typeof(global::YuzuTest.SampleArrayNDim)] = Read_YuzuTestᱹSampleArrayNDim;
			readCache[typeof(global::YuzuTest.SampleBase)] = Read_YuzuTestᱹSampleBase;
			readCache[typeof(global::YuzuTest.SampleDerivedA)] = Read_YuzuTestᱹSampleDerivedA;
			readCache[typeof(global::YuzuTest.SampleDerivedB)] = Read_YuzuTestᱹSampleDerivedB;
			readCache[typeof(global::YuzuTest.SampleMatrix)] = Read_YuzuTestᱹSampleMatrix;
			readCache[typeof(global::YuzuTest.SampleRect)] = Read_YuzuTestᱹSampleRect;
			readCache[typeof(global::YuzuTest.SampleGuid)] = Read_YuzuTestᱹSampleGuid;
			readCache[typeof(global::YuzuTest.SampleDefault)] = Read_YuzuTestᱹSampleDefault;
			readCache[typeof(global::YuzuTest.Color)] = Read_YuzuTestᱹColor;
			readCache[typeof(global::YuzuTest.SampleClassList)] = Read_YuzuTestᱹSampleClassList;
			readCache[typeof(global::YuzuTest.SampleSmallTypes)] = Read_YuzuTestᱹSampleSmallTypes;
			readCache[typeof(global::YuzuTest.SampleWithNullFieldCompact)] = Read_YuzuTestᱹSampleWithNullFieldCompact;
			readCache[typeof(global::YuzuTest.SampleNested.NestedClass)] = Read_YuzuTestᱹSampleNestedᱹNestedClass;
			readCache[typeof(global::YuzuTest.SampleNested)] = Read_YuzuTestᱹSampleNested;
			readCache[typeof(global::YuzuTest.SamplePerson)] = Read_YuzuTestᱹSamplePerson;
			readCache[typeof(global::YuzuTest.SampleInterfaceField)] = Read_YuzuTestᱹSampleInterfaceField;
			readCache[typeof(global::YuzuTest.SampleInterfacedGeneric<string>)] = Read_YuzuTestᱹSampleInterfacedGenericʳstringʴ;
			readCache[typeof(global::YuzuTest.SampleConcrete)] = Read_YuzuTestᱹSampleConcrete;
			readCache[typeof(global::YuzuTest.SampleWithCollection)] = Read_YuzuTestᱹSampleWithCollection;
			readCache[typeof(global::YuzuTest.SampleAfter2)] = Read_YuzuTestᱹSampleAfter2;
			readCache[typeof(global::YuzuTest.SampleAfterSerialization)] = Read_YuzuTestᱹSampleAfterSerialization;
			readCache[typeof(global::YuzuTest.SampleBeforeDeserialization)] = Read_YuzuTestᱹSampleBeforeDeserialization;
			readCache[typeof(global::YuzuTest.SampleMerge)] = Read_YuzuTestᱹSampleMerge;
			readCache[typeof(global::YuzuTest.SampleAssemblyDerivedR)] = Read_YuzuTestᱹSampleAssemblyDerivedR;
			readCache[typeof(global::YuzuTest.SampleAoS.S)] = Read_YuzuTestᱹSampleAoSᱹS;
			readCache[typeof(global::YuzuTest.SampleAoS)] = Read_YuzuTestᱹSampleAoS;
			readCache[typeof(global::YuzuTest.SampleAliasMany)] = Read_YuzuTestᱹSampleAliasMany;
			readCache[typeof(global::YuzuTest.SamplePrivateConstructor)] = Read_YuzuTestᱹSamplePrivateConstructor;
			readCache[typeof(global::YuzuTestAssembly.SampleAssemblyBase)] = Read_YuzuTestAssemblyᱹSampleAssemblyBase;
			readCache[typeof(global::YuzuTestAssembly.SampleAssemblyDerivedQ)] = Read_YuzuTestAssemblyᱹSampleAssemblyDerivedQ;
			readCache[typeof(global::YuzuTest2.SampleNamespace)] = Read_YuzuTest2ᱹSampleNamespace;
			readCache[typeof(global::YuzuTest.SampleExplicitCollection<int>)] = Read_YuzuTestᱹSampleExplicitCollectionʳintʴ;
			makeCache[typeof(global::YuzuTest.Sample1)] = Make_YuzuTestᱹSample1;
			makeCache[typeof(global::YuzuTest.Sample2)] = Make_YuzuTestᱹSample2;
			makeCache[typeof(global::YuzuTest.Sample3)] = Make_YuzuTestᱹSample3;
			makeCache[typeof(global::YuzuTest.SampleEnumMemberTyped)] = Make_YuzuTestᱹSampleEnumMemberTyped;
			makeCache[typeof(global::YuzuTest.Sample4)] = Make_YuzuTestᱹSample4;
			makeCache[typeof(global::YuzuTest.SampleDecimal)] = Make_YuzuTestᱹSampleDecimal;
			makeCache[typeof(global::YuzuTest.SampleNullable)] = Make_YuzuTestᱹSampleNullable;
			makeCache[typeof(global::YuzuTest.SampleObj)] = Make_YuzuTestᱹSampleObj;
			makeCache[typeof(global::YuzuTest.SampleDict)] = Make_YuzuTestᱹSampleDict;
			makeCache[typeof(global::YuzuTest.SampleSortedDict)] = Make_YuzuTestᱹSampleSortedDict;
			makeCache[typeof(global::YuzuTest.SampleDictKeys)] = Make_YuzuTestᱹSampleDictKeys;
			makeCache[typeof(global::YuzuTest.SampleMemberI)] = Make_YuzuTestᱹSampleMemberI;
			makeCache[typeof(global::YuzuTest.SampleArray)] = Make_YuzuTestᱹSampleArray;
			makeCache[typeof(global::YuzuTest.SampleArrayOfArray)] = Make_YuzuTestᱹSampleArrayOfArray;
			makeCache[typeof(global::YuzuTest.SampleArrayNDim)] = Make_YuzuTestᱹSampleArrayNDim;
			makeCache[typeof(global::YuzuTest.SampleBase)] = Make_YuzuTestᱹSampleBase;
			makeCache[typeof(global::YuzuTest.SampleDerivedA)] = Make_YuzuTestᱹSampleDerivedA;
			makeCache[typeof(global::YuzuTest.SampleDerivedB)] = Make_YuzuTestᱹSampleDerivedB;
			makeCache[typeof(global::YuzuTest.SampleMatrix)] = Make_YuzuTestᱹSampleMatrix;
			makeCache[typeof(global::YuzuTest.SamplePoint)] = Make_YuzuTestᱹSamplePoint;
			makeCache[typeof(global::YuzuTest.SampleRect)] = Make_YuzuTestᱹSampleRect;
			makeCache[typeof(global::YuzuTest.SampleGuid)] = Make_YuzuTestᱹSampleGuid;
			makeCache[typeof(global::YuzuTest.SampleDefault)] = Make_YuzuTestᱹSampleDefault;
			makeCache[typeof(global::YuzuTest.Color)] = Make_YuzuTestᱹColor;
			makeCache[typeof(global::YuzuTest.SampleClassList)] = Make_YuzuTestᱹSampleClassList;
			makeCache[typeof(global::YuzuTest.SampleSmallTypes)] = Make_YuzuTestᱹSampleSmallTypes;
			makeCache[typeof(global::YuzuTest.SampleWithNullFieldCompact)] = Make_YuzuTestᱹSampleWithNullFieldCompact;
			makeCache[typeof(global::YuzuTest.SampleNested.NestedClass)] = Make_YuzuTestᱹSampleNestedᱹNestedClass;
			makeCache[typeof(global::YuzuTest.SampleNested)] = Make_YuzuTestᱹSampleNested;
			makeCache[typeof(global::YuzuTest.SamplePerson)] = Make_YuzuTestᱹSamplePerson;
			makeCache[typeof(global::YuzuTest.SampleInterfaceField)] = Make_YuzuTestᱹSampleInterfaceField;
			makeCache[typeof(global::YuzuTest.SampleInterfacedGeneric<string>)] = Make_YuzuTestᱹSampleInterfacedGenericʳstringʴ;
			makeCache[typeof(global::YuzuTest.SampleConcrete)] = Make_YuzuTestᱹSampleConcrete;
			makeCache[typeof(global::YuzuTest.SampleWithCollection)] = Make_YuzuTestᱹSampleWithCollection;
			makeCache[typeof(global::YuzuTest.SampleAfter2)] = Make_YuzuTestᱹSampleAfter2;
			makeCache[typeof(global::YuzuTest.SampleAfterSerialization)] = Make_YuzuTestᱹSampleAfterSerialization;
			makeCache[typeof(global::YuzuTest.SampleBeforeDeserialization)] = Make_YuzuTestᱹSampleBeforeDeserialization;
			makeCache[typeof(global::YuzuTest.SampleMerge)] = Make_YuzuTestᱹSampleMerge;
			makeCache[typeof(global::YuzuTest.SampleAssemblyDerivedR)] = Make_YuzuTestᱹSampleAssemblyDerivedR;
			makeCache[typeof(global::YuzuTest.SampleAoS.Color)] = Make_YuzuTestᱹSampleAoSᱹColor;
			makeCache[typeof(global::YuzuTest.SampleAoS.Vertex)] = Make_YuzuTestᱹSampleAoSᱹVertex;
			makeCache[typeof(global::YuzuTest.SampleAoS.S)] = Make_YuzuTestᱹSampleAoSᱹS;
			makeCache[typeof(global::YuzuTest.SampleAoS)] = Make_YuzuTestᱹSampleAoS;
			makeCache[typeof(global::YuzuTest.SampleStructWithProps)] = Make_YuzuTestᱹSampleStructWithProps;
			makeCache[typeof(global::YuzuTest.SampleAliasMany)] = Make_YuzuTestᱹSampleAliasMany;
			makeCache[typeof(global::YuzuTest.SamplePrivateConstructor)] = Make_YuzuTestᱹSamplePrivateConstructor;
			makeCache[typeof(global::YuzuTestAssembly.SampleAssemblyBase)] = Make_YuzuTestAssemblyᱹSampleAssemblyBase;
			makeCache[typeof(global::YuzuTestAssembly.SampleAssemblyDerivedQ)] = Make_YuzuTestAssemblyᱹSampleAssemblyDerivedQ;
			makeCache[typeof(global::YuzuTest2.SampleNamespace)] = Make_YuzuTest2ᱹSampleNamespace;
			makeCache[typeof(global::YuzuTest.SampleExplicitCollection<int>)] = Make_YuzuTestᱹSampleExplicitCollectionʳintʴ;
		}
	}
}
